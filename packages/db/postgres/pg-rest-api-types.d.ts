/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/admin_search": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.admin_search.user_id"];
          email?: parameters["rowFilter.admin_search.email"];
          github_id?: parameters["rowFilter.admin_search.github_id"];
          token?: parameters["rowFilter.admin_search.token"];
          token_id?: parameters["rowFilter.admin_search.token_id"];
          deleted_at?: parameters["rowFilter.admin_search.deleted_at"];
          reason_inserted_at?: parameters["rowFilter.admin_search.reason_inserted_at"];
          reason?: parameters["rowFilter.admin_search.reason"];
          status?: parameters["rowFilter.admin_search.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["admin_search"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/agreement": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.agreement.id"];
          user_id?: parameters["rowFilter.agreement.user_id"];
          agreement?: parameters["rowFilter.agreement.agreement"];
          inserted_at?: parameters["rowFilter.agreement.inserted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["agreement"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** agreement */
          agreement?: definitions["agreement"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.agreement.id"];
          user_id?: parameters["rowFilter.agreement.user_id"];
          agreement?: parameters["rowFilter.agreement.agreement"];
          inserted_at?: parameters["rowFilter.agreement.inserted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.agreement.id"];
          user_id?: parameters["rowFilter.agreement.user_id"];
          agreement?: parameters["rowFilter.agreement.agreement"];
          inserted_at?: parameters["rowFilter.agreement.inserted_at"];
        };
        body: {
          /** agreement */
          agreement?: definitions["agreement"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/auth_key": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key.id"];
          name?: parameters["rowFilter.auth_key.name"];
          secret?: parameters["rowFilter.auth_key.secret"];
          user_id?: parameters["rowFilter.auth_key.user_id"];
          inserted_at?: parameters["rowFilter.auth_key.inserted_at"];
          updated_at?: parameters["rowFilter.auth_key.updated_at"];
          deleted_at?: parameters["rowFilter.auth_key.deleted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["auth_key"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** auth_key */
          auth_key?: definitions["auth_key"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key.id"];
          name?: parameters["rowFilter.auth_key.name"];
          secret?: parameters["rowFilter.auth_key.secret"];
          user_id?: parameters["rowFilter.auth_key.user_id"];
          inserted_at?: parameters["rowFilter.auth_key.inserted_at"];
          updated_at?: parameters["rowFilter.auth_key.updated_at"];
          deleted_at?: parameters["rowFilter.auth_key.deleted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key.id"];
          name?: parameters["rowFilter.auth_key.name"];
          secret?: parameters["rowFilter.auth_key.secret"];
          user_id?: parameters["rowFilter.auth_key.user_id"];
          inserted_at?: parameters["rowFilter.auth_key.inserted_at"];
          updated_at?: parameters["rowFilter.auth_key.updated_at"];
          deleted_at?: parameters["rowFilter.auth_key.deleted_at"];
        };
        body: {
          /** auth_key */
          auth_key?: definitions["auth_key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/auth_key_history": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key_history.id"];
          status?: parameters["rowFilter.auth_key_history.status"];
          reason?: parameters["rowFilter.auth_key_history.reason"];
          auth_key_id?: parameters["rowFilter.auth_key_history.auth_key_id"];
          inserted_at?: parameters["rowFilter.auth_key_history.inserted_at"];
          deleted_at?: parameters["rowFilter.auth_key_history.deleted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["auth_key_history"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** auth_key_history */
          auth_key_history?: definitions["auth_key_history"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key_history.id"];
          status?: parameters["rowFilter.auth_key_history.status"];
          reason?: parameters["rowFilter.auth_key_history.reason"];
          auth_key_id?: parameters["rowFilter.auth_key_history.auth_key_id"];
          inserted_at?: parameters["rowFilter.auth_key_history.inserted_at"];
          deleted_at?: parameters["rowFilter.auth_key_history.deleted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.auth_key_history.id"];
          status?: parameters["rowFilter.auth_key_history.status"];
          reason?: parameters["rowFilter.auth_key_history.reason"];
          auth_key_id?: parameters["rowFilter.auth_key_history.auth_key_id"];
          inserted_at?: parameters["rowFilter.auth_key_history.inserted_at"];
          deleted_at?: parameters["rowFilter.auth_key_history.deleted_at"];
        };
        body: {
          /** auth_key_history */
          auth_key_history?: definitions["auth_key_history"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/backup": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.backup.id"];
          upload_id?: parameters["rowFilter.backup.upload_id"];
          url?: parameters["rowFilter.backup.url"];
          inserted_at?: parameters["rowFilter.backup.inserted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["backup"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** backup */
          backup?: definitions["backup"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.backup.id"];
          upload_id?: parameters["rowFilter.backup.upload_id"];
          url?: parameters["rowFilter.backup.url"];
          inserted_at?: parameters["rowFilter.backup.inserted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.backup.id"];
          upload_id?: parameters["rowFilter.backup.upload_id"];
          url?: parameters["rowFilter.backup.url"];
          inserted_at?: parameters["rowFilter.backup.inserted_at"];
        };
        body: {
          /** backup */
          backup?: definitions["backup"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/content": {
    get: {
      parameters: {
        query: {
          cid?: parameters["rowFilter.content.cid"];
          dag_size?: parameters["rowFilter.content.dag_size"];
          inserted_at?: parameters["rowFilter.content.inserted_at"];
          updated_at?: parameters["rowFilter.content.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["content"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** content */
          content?: definitions["content"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          cid?: parameters["rowFilter.content.cid"];
          dag_size?: parameters["rowFilter.content.dag_size"];
          inserted_at?: parameters["rowFilter.content.inserted_at"];
          updated_at?: parameters["rowFilter.content.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          cid?: parameters["rowFilter.content.cid"];
          dag_size?: parameters["rowFilter.content.dag_size"];
          inserted_at?: parameters["rowFilter.content.inserted_at"];
          updated_at?: parameters["rowFilter.content.updated_at"];
        };
        body: {
          /** content */
          content?: definitions["content"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/email_history": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_history.id"];
          user_id?: parameters["rowFilter.email_history.user_id"];
          email_type?: parameters["rowFilter.email_history.email_type"];
          message_id?: parameters["rowFilter.email_history.message_id"];
          sent_at?: parameters["rowFilter.email_history.sent_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["email_history"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** email_history */
          email_history?: definitions["email_history"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_history.id"];
          user_id?: parameters["rowFilter.email_history.user_id"];
          email_type?: parameters["rowFilter.email_history.email_type"];
          message_id?: parameters["rowFilter.email_history.message_id"];
          sent_at?: parameters["rowFilter.email_history.sent_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_history.id"];
          user_id?: parameters["rowFilter.email_history.user_id"];
          email_type?: parameters["rowFilter.email_history.email_type"];
          message_id?: parameters["rowFilter.email_history.message_id"];
          sent_at?: parameters["rowFilter.email_history.sent_at"];
        };
        body: {
          /** email_history */
          email_history?: definitions["email_history"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/metric": {
    get: {
      parameters: {
        query: {
          name?: parameters["rowFilter.metric.name"];
          value?: parameters["rowFilter.metric.value"];
          inserted_at?: parameters["rowFilter.metric.inserted_at"];
          updated_at?: parameters["rowFilter.metric.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["metric"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** metric */
          metric?: definitions["metric"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          name?: parameters["rowFilter.metric.name"];
          value?: parameters["rowFilter.metric.value"];
          inserted_at?: parameters["rowFilter.metric.inserted_at"];
          updated_at?: parameters["rowFilter.metric.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          name?: parameters["rowFilter.metric.name"];
          value?: parameters["rowFilter.metric.value"];
          inserted_at?: parameters["rowFilter.metric.inserted_at"];
          updated_at?: parameters["rowFilter.metric.updated_at"];
        };
        body: {
          /** metric */
          metric?: definitions["metric"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pin": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin.id"];
          status?: parameters["rowFilter.pin.status"];
          content_cid?: parameters["rowFilter.pin.content_cid"];
          pin_location_id?: parameters["rowFilter.pin.pin_location_id"];
          inserted_at?: parameters["rowFilter.pin.inserted_at"];
          updated_at?: parameters["rowFilter.pin.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pin"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pin */
          pin?: definitions["pin"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin.id"];
          status?: parameters["rowFilter.pin.status"];
          content_cid?: parameters["rowFilter.pin.content_cid"];
          pin_location_id?: parameters["rowFilter.pin.pin_location_id"];
          inserted_at?: parameters["rowFilter.pin.inserted_at"];
          updated_at?: parameters["rowFilter.pin.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin.id"];
          status?: parameters["rowFilter.pin.status"];
          content_cid?: parameters["rowFilter.pin.content_cid"];
          pin_location_id?: parameters["rowFilter.pin.pin_location_id"];
          inserted_at?: parameters["rowFilter.pin.inserted_at"];
          updated_at?: parameters["rowFilter.pin.updated_at"];
        };
        body: {
          /** pin */
          pin?: definitions["pin"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pin_location": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_location.id"];
          peer_id?: parameters["rowFilter.pin_location.peer_id"];
          peer_name?: parameters["rowFilter.pin_location.peer_name"];
          ipfs_peer_id?: parameters["rowFilter.pin_location.ipfs_peer_id"];
          region?: parameters["rowFilter.pin_location.region"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pin_location"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pin_location */
          pin_location?: definitions["pin_location"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_location.id"];
          peer_id?: parameters["rowFilter.pin_location.peer_id"];
          peer_name?: parameters["rowFilter.pin_location.peer_name"];
          ipfs_peer_id?: parameters["rowFilter.pin_location.ipfs_peer_id"];
          region?: parameters["rowFilter.pin_location.region"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_location.id"];
          peer_id?: parameters["rowFilter.pin_location.peer_id"];
          peer_name?: parameters["rowFilter.pin_location.peer_name"];
          ipfs_peer_id?: parameters["rowFilter.pin_location.ipfs_peer_id"];
          region?: parameters["rowFilter.pin_location.region"];
        };
        body: {
          /** pin_location */
          pin_location?: definitions["pin_location"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pin_sync_request": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_sync_request.id"];
          pin_id?: parameters["rowFilter.pin_sync_request.pin_id"];
          inserted_at?: parameters["rowFilter.pin_sync_request.inserted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pin_sync_request"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pin_sync_request */
          pin_sync_request?: definitions["pin_sync_request"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_sync_request.id"];
          pin_id?: parameters["rowFilter.pin_sync_request.pin_id"];
          inserted_at?: parameters["rowFilter.pin_sync_request.inserted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pin_sync_request.id"];
          pin_id?: parameters["rowFilter.pin_sync_request.pin_id"];
          inserted_at?: parameters["rowFilter.pin_sync_request.inserted_at"];
        };
        body: {
          /** pin_sync_request */
          pin_sync_request?: definitions["pin_sync_request"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/psa_pin_request": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.psa_pin_request.id"];
          auth_key_id?: parameters["rowFilter.psa_pin_request.auth_key_id"];
          content_cid?: parameters["rowFilter.psa_pin_request.content_cid"];
          source_cid?: parameters["rowFilter.psa_pin_request.source_cid"];
          name?: parameters["rowFilter.psa_pin_request.name"];
          origins?: parameters["rowFilter.psa_pin_request.origins"];
          meta?: parameters["rowFilter.psa_pin_request.meta"];
          deleted_at?: parameters["rowFilter.psa_pin_request.deleted_at"];
          inserted_at?: parameters["rowFilter.psa_pin_request.inserted_at"];
          updated_at?: parameters["rowFilter.psa_pin_request.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["psa_pin_request"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** psa_pin_request */
          psa_pin_request?: definitions["psa_pin_request"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.psa_pin_request.id"];
          auth_key_id?: parameters["rowFilter.psa_pin_request.auth_key_id"];
          content_cid?: parameters["rowFilter.psa_pin_request.content_cid"];
          source_cid?: parameters["rowFilter.psa_pin_request.source_cid"];
          name?: parameters["rowFilter.psa_pin_request.name"];
          origins?: parameters["rowFilter.psa_pin_request.origins"];
          meta?: parameters["rowFilter.psa_pin_request.meta"];
          deleted_at?: parameters["rowFilter.psa_pin_request.deleted_at"];
          inserted_at?: parameters["rowFilter.psa_pin_request.inserted_at"];
          updated_at?: parameters["rowFilter.psa_pin_request.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.psa_pin_request.id"];
          auth_key_id?: parameters["rowFilter.psa_pin_request.auth_key_id"];
          content_cid?: parameters["rowFilter.psa_pin_request.content_cid"];
          source_cid?: parameters["rowFilter.psa_pin_request.source_cid"];
          name?: parameters["rowFilter.psa_pin_request.name"];
          origins?: parameters["rowFilter.psa_pin_request.origins"];
          meta?: parameters["rowFilter.psa_pin_request.meta"];
          deleted_at?: parameters["rowFilter.psa_pin_request.deleted_at"];
          inserted_at?: parameters["rowFilter.psa_pin_request.inserted_at"];
          updated_at?: parameters["rowFilter.psa_pin_request.updated_at"];
        };
        body: {
          /** psa_pin_request */
          psa_pin_request?: definitions["psa_pin_request"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/upload": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.upload.id"];
          user_id?: parameters["rowFilter.upload.user_id"];
          auth_key_id?: parameters["rowFilter.upload.auth_key_id"];
          content_cid?: parameters["rowFilter.upload.content_cid"];
          source_cid?: parameters["rowFilter.upload.source_cid"];
          type?: parameters["rowFilter.upload.type"];
          name?: parameters["rowFilter.upload.name"];
          backup_urls?: parameters["rowFilter.upload.backup_urls"];
          inserted_at?: parameters["rowFilter.upload.inserted_at"];
          updated_at?: parameters["rowFilter.upload.updated_at"];
          deleted_at?: parameters["rowFilter.upload.deleted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["upload"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** upload */
          upload?: definitions["upload"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.upload.id"];
          user_id?: parameters["rowFilter.upload.user_id"];
          auth_key_id?: parameters["rowFilter.upload.auth_key_id"];
          content_cid?: parameters["rowFilter.upload.content_cid"];
          source_cid?: parameters["rowFilter.upload.source_cid"];
          type?: parameters["rowFilter.upload.type"];
          name?: parameters["rowFilter.upload.name"];
          backup_urls?: parameters["rowFilter.upload.backup_urls"];
          inserted_at?: parameters["rowFilter.upload.inserted_at"];
          updated_at?: parameters["rowFilter.upload.updated_at"];
          deleted_at?: parameters["rowFilter.upload.deleted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.upload.id"];
          user_id?: parameters["rowFilter.upload.user_id"];
          auth_key_id?: parameters["rowFilter.upload.auth_key_id"];
          content_cid?: parameters["rowFilter.upload.content_cid"];
          source_cid?: parameters["rowFilter.upload.source_cid"];
          type?: parameters["rowFilter.upload.type"];
          name?: parameters["rowFilter.upload.name"];
          backup_urls?: parameters["rowFilter.upload.backup_urls"];
          inserted_at?: parameters["rowFilter.upload.inserted_at"];
          updated_at?: parameters["rowFilter.upload.updated_at"];
          deleted_at?: parameters["rowFilter.upload.deleted_at"];
        };
        body: {
          /** upload */
          upload?: definitions["upload"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          name?: parameters["rowFilter.user.name"];
          picture?: parameters["rowFilter.user.picture"];
          email?: parameters["rowFilter.user.email"];
          issuer?: parameters["rowFilter.user.issuer"];
          github?: parameters["rowFilter.user.github"];
          public_address?: parameters["rowFilter.user.public_address"];
          inserted_at?: parameters["rowFilter.user.inserted_at"];
          updated_at?: parameters["rowFilter.user.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user */
          user?: definitions["user"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          name?: parameters["rowFilter.user.name"];
          picture?: parameters["rowFilter.user.picture"];
          email?: parameters["rowFilter.user.email"];
          issuer?: parameters["rowFilter.user.issuer"];
          github?: parameters["rowFilter.user.github"];
          public_address?: parameters["rowFilter.user.public_address"];
          inserted_at?: parameters["rowFilter.user.inserted_at"];
          updated_at?: parameters["rowFilter.user.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user.id"];
          name?: parameters["rowFilter.user.name"];
          picture?: parameters["rowFilter.user.picture"];
          email?: parameters["rowFilter.user.email"];
          issuer?: parameters["rowFilter.user.issuer"];
          github?: parameters["rowFilter.user.github"];
          public_address?: parameters["rowFilter.user.public_address"];
          inserted_at?: parameters["rowFilter.user.inserted_at"];
          updated_at?: parameters["rowFilter.user.updated_at"];
        };
        body: {
          /** user */
          user?: definitions["user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_customer": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_customer.id"];
          user_id?: parameters["rowFilter.user_customer.user_id"];
          customer_id?: parameters["rowFilter.user_customer.customer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_customer"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_customer */
          user_customer?: definitions["user_customer"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_customer.id"];
          user_id?: parameters["rowFilter.user_customer.user_id"];
          customer_id?: parameters["rowFilter.user_customer.customer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_customer.id"];
          user_id?: parameters["rowFilter.user_customer.user_id"];
          customer_id?: parameters["rowFilter.user_customer.customer_id"];
        };
        body: {
          /** user_customer */
          user_customer?: definitions["user_customer"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_tag": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag.id"];
          user_id?: parameters["rowFilter.user_tag.user_id"];
          tag?: parameters["rowFilter.user_tag.tag"];
          value?: parameters["rowFilter.user_tag.value"];
          reason?: parameters["rowFilter.user_tag.reason"];
          inserted_at?: parameters["rowFilter.user_tag.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag.deleted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_tag"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_tag */
          user_tag?: definitions["user_tag"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag.id"];
          user_id?: parameters["rowFilter.user_tag.user_id"];
          tag?: parameters["rowFilter.user_tag.tag"];
          value?: parameters["rowFilter.user_tag.value"];
          reason?: parameters["rowFilter.user_tag.reason"];
          inserted_at?: parameters["rowFilter.user_tag.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag.deleted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag.id"];
          user_id?: parameters["rowFilter.user_tag.user_id"];
          tag?: parameters["rowFilter.user_tag.tag"];
          value?: parameters["rowFilter.user_tag.value"];
          reason?: parameters["rowFilter.user_tag.reason"];
          inserted_at?: parameters["rowFilter.user_tag.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag.deleted_at"];
        };
        body: {
          /** user_tag */
          user_tag?: definitions["user_tag"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_tag_proposal": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag_proposal.id"];
          user_id?: parameters["rowFilter.user_tag_proposal.user_id"];
          tag?: parameters["rowFilter.user_tag_proposal.tag"];
          proposed_tag_value?: parameters["rowFilter.user_tag_proposal.proposed_tag_value"];
          user_proposal_form?: parameters["rowFilter.user_tag_proposal.user_proposal_form"];
          admin_decision_message?: parameters["rowFilter.user_tag_proposal.admin_decision_message"];
          admin_decision_type?: parameters["rowFilter.user_tag_proposal.admin_decision_type"];
          inserted_at?: parameters["rowFilter.user_tag_proposal.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag_proposal.deleted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_tag_proposal"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_tag_proposal */
          user_tag_proposal?: definitions["user_tag_proposal"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag_proposal.id"];
          user_id?: parameters["rowFilter.user_tag_proposal.user_id"];
          tag?: parameters["rowFilter.user_tag_proposal.tag"];
          proposed_tag_value?: parameters["rowFilter.user_tag_proposal.proposed_tag_value"];
          user_proposal_form?: parameters["rowFilter.user_tag_proposal.user_proposal_form"];
          admin_decision_message?: parameters["rowFilter.user_tag_proposal.admin_decision_message"];
          admin_decision_type?: parameters["rowFilter.user_tag_proposal.admin_decision_type"];
          inserted_at?: parameters["rowFilter.user_tag_proposal.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag_proposal.deleted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_tag_proposal.id"];
          user_id?: parameters["rowFilter.user_tag_proposal.user_id"];
          tag?: parameters["rowFilter.user_tag_proposal.tag"];
          proposed_tag_value?: parameters["rowFilter.user_tag_proposal.proposed_tag_value"];
          user_proposal_form?: parameters["rowFilter.user_tag_proposal.user_proposal_form"];
          admin_decision_message?: parameters["rowFilter.user_tag_proposal.admin_decision_message"];
          admin_decision_type?: parameters["rowFilter.user_tag_proposal.admin_decision_type"];
          inserted_at?: parameters["rowFilter.user_tag_proposal.inserted_at"];
          deleted_at?: parameters["rowFilter.user_tag_proposal.deleted_at"];
        };
        body: {
          /** user_tag_proposal */
          user_tag_proposal?: definitions["user_tag_proposal"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/upsert_user": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            _github: string;
            /** Format: text */
            _email: string;
            /** Format: text */
            _name: string;
            /** Format: text */
            _picture: string;
            /** Format: text */
            _issuer: string;
            /** Format: text */
            _public_address: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/user_auth_keys_list": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            query_user_id: number;
            /** Format: boolean */
            include_deleted?: boolean;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_psa_pin_request": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/user_used_storage": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            query_user_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/json_arr_to_json_element_array": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            _json: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_key": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/json_arr_to_text_arr": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            _json: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/user_uploaded_storage": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            query_user_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_generate_v1mc": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_generate_v1": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_generate_v4": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_upload": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/upsert_pin": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/find_deals_by_content_cids": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text[] */
            cids: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/users_by_storage_used": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            to_percent?: number;
            /** Format: bigint */
            user_id_gt?: number;
            /** Format: integer */
            from_percent: number;
            /** Format: bigint */
            user_id_lte?: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_ns_url": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_generate_v5": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            name: string;
            /** Format: uuid */
            namespace: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_content_with_pin_sync_request": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_content": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_ns_oid": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/user_psa_storage": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            query_user_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgrst_watch": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_ns_x500": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_nil": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_ns_dns": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/upsert_pins": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: json */
            data: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_generate_v3": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            name: string;
            /** Format: uuid */
            namespace: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  admin_search: {
    /** Format: text */
    user_id?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    github_id?: string;
    /** Format: text */
    token?: string;
    /** Format: text */
    token_id?: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /** Format: timestamp with time zone */
    reason_inserted_at?: string;
    /** Format: text */
    reason?: string;
    /** Format: public.auth_key_blocked_status_type */
    status?: "Blocked" | "Unblocked";
  };
  agreement: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /** Format: public.agreement_type */
    agreement: "web3.storage-tos-v1";
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
  };
  auth_key: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /** Format: text */
    secret: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
  };
  auth_key_history: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: public.auth_key_blocked_status_type */
    status: "Blocked" | "Unblocked";
    /** Format: text */
    reason: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `auth_key.id`.<fk table='auth_key' column='id'/>
     */
    auth_key_id: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
  };
  backup: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `upload.id`.<fk table='upload' column='id'/>
     */
    upload_id: number;
    /** Format: text */
    url: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
  };
  content: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    cid: string;
    /** Format: bigint */
    dag_size?: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  email_history: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /** Format: public.email_type */
    email_type:
      | "User75PercentStorage"
      | "User80PercentStorage"
      | "User85PercentStorage"
      | "User90PercentStorage"
      | "User100PercentStorage"
      | "AdminStorageExceeded";
    /** Format: text */
    message_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    sent_at: string;
  };
  metric: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    name: string;
    /** Format: bigint */
    value: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  pin: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: public.pin_status_type */
    status:
      | "Undefined"
      | "ClusterError"
      | "PinError"
      | "UnpinError"
      | "Pinned"
      | "Pinning"
      | "Unpinning"
      | "Unpinned"
      | "PinQueued"
      | "UnpinQueued"
      | "Sharded"
      | "UnexpectedlyUnpinned";
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `content.cid`.<fk table='content' column='cid'/>
     */
    content_cid: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `pin_location.id`.<fk table='pin_location' column='id'/>
     */
    pin_location_id: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  pin_location: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    peer_id: string;
    /** Format: text */
    peer_name?: string;
    /** Format: text */
    ipfs_peer_id?: string;
    /** Format: text */
    region?: string;
  };
  pin_sync_request: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `pin.id`.<fk table='pin' column='id'/>
     */
    pin_id: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
  };
  psa_pin_request: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `auth_key.id`.<fk table='auth_key' column='id'/>
     */
    auth_key_id: number;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `content.cid`.<fk table='content' column='cid'/>
     */
    content_cid: string;
    /** Format: text */
    source_cid: string;
    /** Format: text */
    name?: string;
    /** Format: jsonb */
    origins?: string;
    /** Format: jsonb */
    meta?: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  upload: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `auth_key.id`.<fk table='auth_key' column='id'/>
     */
    auth_key_id?: number;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `content.cid`.<fk table='content' column='cid'/>
     */
    content_cid: string;
    /** Format: text */
    source_cid: string;
    /** Format: public.upload_type */
    type: "Car" | "Upload" | "Blob" | "Multipart";
    /** Format: text */
    name?: string;
    /** Format: ARRAY */
    backup_urls?: unknown[];
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
  };
  user: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /** Format: text */
    picture?: string;
    /** Format: text */
    email: string;
    /** Format: text */
    issuer: string;
    /** Format: text */
    github?: string;
    /** Format: text */
    public_address: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
  };
  user_customer: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /** Format: text */
    customer_id: string;
  };
  user_tag: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /** Format: public.user_tag_type */
    tag:
      | "HasAccountRestriction"
      | "HasDeleteRestriction"
      | "HasPsaAccess"
      | "StorageLimitBytes";
    /** Format: text */
    value: string;
    /** Format: text */
    reason: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
  };
  user_tag_proposal: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /** Format: public.user_tag_type */
    tag:
      | "HasAccountRestriction"
      | "HasDeleteRestriction"
      | "HasPsaAccess"
      | "StorageLimitBytes";
    /** Format: text */
    proposed_tag_value: string;
    /** Format: jsonb */
    user_proposal_form: string;
    /** Format: text */
    admin_decision_message?: string;
    /** Format: public.user_tag_proposal_decision_type */
    admin_decision_type?: "Approved" | "Declined";
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description admin_search */
  "body.admin_search": definitions["admin_search"];
  /** Format: text */
  "rowFilter.admin_search.user_id": string;
  /** Format: text */
  "rowFilter.admin_search.email": string;
  /** Format: text */
  "rowFilter.admin_search.github_id": string;
  /** Format: text */
  "rowFilter.admin_search.token": string;
  /** Format: text */
  "rowFilter.admin_search.token_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.admin_search.deleted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.admin_search.reason_inserted_at": string;
  /** Format: text */
  "rowFilter.admin_search.reason": string;
  /** Format: public.auth_key_blocked_status_type */
  "rowFilter.admin_search.status": string;
  /** @description agreement */
  "body.agreement": definitions["agreement"];
  /** Format: bigint */
  "rowFilter.agreement.id": string;
  /** Format: bigint */
  "rowFilter.agreement.user_id": string;
  /** Format: public.agreement_type */
  "rowFilter.agreement.agreement": string;
  /** Format: timestamp with time zone */
  "rowFilter.agreement.inserted_at": string;
  /** @description auth_key */
  "body.auth_key": definitions["auth_key"];
  /** Format: bigint */
  "rowFilter.auth_key.id": string;
  /** Format: text */
  "rowFilter.auth_key.name": string;
  /** Format: text */
  "rowFilter.auth_key.secret": string;
  /** Format: bigint */
  "rowFilter.auth_key.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.auth_key.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.auth_key.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.auth_key.deleted_at": string;
  /** @description auth_key_history */
  "body.auth_key_history": definitions["auth_key_history"];
  /** Format: bigint */
  "rowFilter.auth_key_history.id": string;
  /** Format: public.auth_key_blocked_status_type */
  "rowFilter.auth_key_history.status": string;
  /** Format: text */
  "rowFilter.auth_key_history.reason": string;
  /** Format: bigint */
  "rowFilter.auth_key_history.auth_key_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.auth_key_history.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.auth_key_history.deleted_at": string;
  /** @description backup */
  "body.backup": definitions["backup"];
  /** Format: bigint */
  "rowFilter.backup.id": string;
  /** Format: bigint */
  "rowFilter.backup.upload_id": string;
  /** Format: text */
  "rowFilter.backup.url": string;
  /** Format: timestamp with time zone */
  "rowFilter.backup.inserted_at": string;
  /** @description content */
  "body.content": definitions["content"];
  /** Format: text */
  "rowFilter.content.cid": string;
  /** Format: bigint */
  "rowFilter.content.dag_size": string;
  /** Format: timestamp with time zone */
  "rowFilter.content.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.content.updated_at": string;
  /** @description email_history */
  "body.email_history": definitions["email_history"];
  /** Format: bigint */
  "rowFilter.email_history.id": string;
  /** Format: bigint */
  "rowFilter.email_history.user_id": string;
  /** Format: public.email_type */
  "rowFilter.email_history.email_type": string;
  /** Format: text */
  "rowFilter.email_history.message_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.email_history.sent_at": string;
  /** @description metric */
  "body.metric": definitions["metric"];
  /** Format: text */
  "rowFilter.metric.name": string;
  /** Format: bigint */
  "rowFilter.metric.value": string;
  /** Format: timestamp with time zone */
  "rowFilter.metric.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.metric.updated_at": string;
  /** @description pin */
  "body.pin": definitions["pin"];
  /** Format: bigint */
  "rowFilter.pin.id": string;
  /** Format: public.pin_status_type */
  "rowFilter.pin.status": string;
  /** Format: text */
  "rowFilter.pin.content_cid": string;
  /** Format: bigint */
  "rowFilter.pin.pin_location_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pin.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.pin.updated_at": string;
  /** @description pin_location */
  "body.pin_location": definitions["pin_location"];
  /** Format: bigint */
  "rowFilter.pin_location.id": string;
  /** Format: text */
  "rowFilter.pin_location.peer_id": string;
  /** Format: text */
  "rowFilter.pin_location.peer_name": string;
  /** Format: text */
  "rowFilter.pin_location.ipfs_peer_id": string;
  /** Format: text */
  "rowFilter.pin_location.region": string;
  /** @description pin_sync_request */
  "body.pin_sync_request": definitions["pin_sync_request"];
  /** Format: bigint */
  "rowFilter.pin_sync_request.id": string;
  /** Format: bigint */
  "rowFilter.pin_sync_request.pin_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pin_sync_request.inserted_at": string;
  /** @description psa_pin_request */
  "body.psa_pin_request": definitions["psa_pin_request"];
  /** Format: text */
  "rowFilter.psa_pin_request.id": string;
  /** Format: bigint */
  "rowFilter.psa_pin_request.auth_key_id": string;
  /** Format: text */
  "rowFilter.psa_pin_request.content_cid": string;
  /** Format: text */
  "rowFilter.psa_pin_request.source_cid": string;
  /** Format: text */
  "rowFilter.psa_pin_request.name": string;
  /** Format: jsonb */
  "rowFilter.psa_pin_request.origins": string;
  /** Format: jsonb */
  "rowFilter.psa_pin_request.meta": string;
  /** Format: timestamp with time zone */
  "rowFilter.psa_pin_request.deleted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.psa_pin_request.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.psa_pin_request.updated_at": string;
  /** @description upload */
  "body.upload": definitions["upload"];
  /** Format: bigint */
  "rowFilter.upload.id": string;
  /** Format: bigint */
  "rowFilter.upload.user_id": string;
  /** Format: bigint */
  "rowFilter.upload.auth_key_id": string;
  /** Format: text */
  "rowFilter.upload.content_cid": string;
  /** Format: text */
  "rowFilter.upload.source_cid": string;
  /** Format: public.upload_type */
  "rowFilter.upload.type": string;
  /** Format: text */
  "rowFilter.upload.name": string;
  /** Format: ARRAY */
  "rowFilter.upload.backup_urls": string;
  /** Format: timestamp with time zone */
  "rowFilter.upload.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.upload.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.upload.deleted_at": string;
  /** @description user */
  "body.user": definitions["user"];
  /** Format: bigint */
  "rowFilter.user.id": string;
  /** Format: text */
  "rowFilter.user.name": string;
  /** Format: text */
  "rowFilter.user.picture": string;
  /** Format: text */
  "rowFilter.user.email": string;
  /** Format: text */
  "rowFilter.user.issuer": string;
  /** Format: text */
  "rowFilter.user.github": string;
  /** Format: text */
  "rowFilter.user.public_address": string;
  /** Format: timestamp with time zone */
  "rowFilter.user.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.user.updated_at": string;
  /** @description user_customer */
  "body.user_customer": definitions["user_customer"];
  /** Format: bigint */
  "rowFilter.user_customer.id": string;
  /** Format: bigint */
  "rowFilter.user_customer.user_id": string;
  /** Format: text */
  "rowFilter.user_customer.customer_id": string;
  /** @description user_tag */
  "body.user_tag": definitions["user_tag"];
  /** Format: bigint */
  "rowFilter.user_tag.id": string;
  /** Format: bigint */
  "rowFilter.user_tag.user_id": string;
  /** Format: public.user_tag_type */
  "rowFilter.user_tag.tag": string;
  /** Format: text */
  "rowFilter.user_tag.value": string;
  /** Format: text */
  "rowFilter.user_tag.reason": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_tag.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_tag.deleted_at": string;
  /** @description user_tag_proposal */
  "body.user_tag_proposal": definitions["user_tag_proposal"];
  /** Format: bigint */
  "rowFilter.user_tag_proposal.id": string;
  /** Format: bigint */
  "rowFilter.user_tag_proposal.user_id": string;
  /** Format: public.user_tag_type */
  "rowFilter.user_tag_proposal.tag": string;
  /** Format: text */
  "rowFilter.user_tag_proposal.proposed_tag_value": string;
  /** Format: jsonb */
  "rowFilter.user_tag_proposal.user_proposal_form": string;
  /** Format: text */
  "rowFilter.user_tag_proposal.admin_decision_message": string;
  /** Format: public.user_tag_proposal_decision_type */
  "rowFilter.user_tag_proposal.admin_decision_type": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_tag_proposal.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_tag_proposal.deleted_at": string;
}

export interface operations {}

export interface external {}
